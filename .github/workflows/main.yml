name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Debug Secret
      run: |
        echo "Secret exists: ${{ secrets.cursor != '' }}"
        
    - name: Create config and start bot
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
      run: |
        # Create config file
        echo "$CURSOR_SECRET" > config.json
        
        # Validate JSON format
        echo "Validating JSON format..."
        if ! python -c "import json; json.load(open('config.json'))"; then
          echo "Error: Invalid JSON format in secret"
          cat config.json
          exit 1
        fi
        
        # Create .env file
        echo "Creating .env file..."
        cat > create_env.py << 'EOF'
        import json
        import sys
        
        try:
            with open("config.json") as f:
                config = json.load(f)
            
            with open(".env", "w") as f:
                for key, value in config.items():
                    if isinstance(value, (list, dict)):
                        f.write(f"{key}={json.dumps(value)}\n")
                    else:
                        f.write(f"{key}={value}\n")
            print("Successfully created .env file")
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOF
        
        python create_env.py
        
        # Show .env content (ohne sensitive Daten)
        echo "Checking .env file structure..."
        grep -v "_KEY\|TOKEN\|ID" .env || true
        
        echo "Setup completed successfully"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: pip install requests
        
    - name: Send notification
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
        DEPLOY_STATUS: ${{ needs.deploy.result }}
      run: |
        cat > send_notification.py << 'EOF'
        import json
        import os
        import sys
        import requests
        
        try:
            config = json.loads(os.environ["CURSOR_SECRET"])
            status = os.environ["DEPLOY_STATUS"]
            
            bot_token = config.get("TELEGRAM_BOT_TOKEN")
            chat_id = config.get("TELEGRAM_CHAT_ID")
            
            print("Debug - Bot Token length:", len(bot_token) if bot_token else "None")
            print("Debug - Chat ID:", chat_id)
            
            if not bot_token or not chat_id:
                print("Error: Missing Telegram configuration")
                sys.exit(1)
            
            message = "✅ Deployment erfolgreich" if status == "success" else "❌ Deployment fehlgeschlagen"
            
            # Test Telegram API Erreichbarkeit
            test_response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe")
            print("Debug - Telegram API Test Response:", test_response.json())
            
            api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            print("Debug - API URL:", api_url.replace(bot_token, "BOT_TOKEN"))
            print("Debug - Payload:", payload)
            
            response = requests.post(api_url, json=payload)
            
            if not response.ok:
                print(f"Error sending message: {response.text}", file=sys.stderr)
                print("Debug - Response Status Code:", response.status_code)
                print("Debug - Response Headers:", dict(response.headers))
                sys.exit(1)
                
            print("Notification sent successfully")
            print("Debug - Success Response:", response.json())
            
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            print("Debug - Exception type:", type(e).__name__)
            sys.exit(1)
        EOF
        
        python send_notification.py 