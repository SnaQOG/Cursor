name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linters
      run: |
        black . --check
        flake8 .
        mypy .
        isort . --check
        
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run security checks
      continue-on-error: true  # Temporär erlauben weiterzumachen
      run: |
        bandit -r src/
        safety check
        
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build
        
    - name: Build package
      run: python -m build
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
        
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Debug Secret
      run: |
        echo "Secret length: ${#CURSOR_SECRET}"
        echo "First 10 chars: ${CURSOR_SECRET:0:10}..."
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
        
    - name: Deploy to production
      id: deploy
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
      run: |
        # Debug-Ausgabe
        echo "Creating config file..."
        echo "$CURSOR_SECRET" > config.json
        echo "Config file created. Content preview:"
        head -n 5 config.json
        
        # Validiere JSON
        if ! jq empty config.json 2>/dev/null; then
          echo "Error: Invalid JSON in config.json"
          exit 1
        fi
        
        # Erstelle .env Datei
        echo "Creating .env file..."
        python -c "
import json
import sys

try:
    with open('config.json') as f:
        config = json.load(f)
    with open('.env', 'w') as f:
        for key, value in config.items():
            if isinstance(value, (list, dict)):
                f.write(f'{key}={json.dumps(value)}\n')
            else:
                f.write(f'{key}={value}\n')
    print('.env file created successfully')
except Exception as e:
    print(f'Error creating .env file: {e}', file=sys.stderr)
    sys.exit(1)
"
        
        # Starte den Bot
        echo "Starting bot..."
        python Trading.py &
        sleep 10
        
        # Überprüfe ob der Bot läuft
        if ps aux | grep -v grep | grep "Trading.py"; then
          echo "Bot successfully started"
          exit 0
        else
          echo "Bot failed to start"
          echo "Checking logs..."
          tail -n 50 *.log
          exit 1
        fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Send notification
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
        DEPLOY_STATUS: ${{ needs.deploy.result }}
      run: |
        python -c "
import json
import os
import sys
import requests

try:
    # Lade Konfiguration
    config = json.loads(os.environ['CURSOR_SECRET'])
    status = os.environ['DEPLOY_STATUS']
    
    bot_token = config.get('TELEGRAM_BOT_TOKEN')
    chat_id = config.get('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        print('Error: Missing Telegram configuration')
        sys.exit(1)
    
    message = '✅ Deployment erfolgreich abgeschlossen' if status == 'success' else '❌ Deployment fehlgeschlagen'
    
    response = requests.post(
        f'https://api.telegram.org/bot{bot_token}/sendMessage',
        json={
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
    )
    
    if not response.ok:
        print(f'Error sending Telegram message: {response.text}', file=sys.stderr)
        sys.exit(1)
        
    print('Notification sent successfully')
except Exception as e:
    print(f'Error in notification script: {e}', file=sys.stderr)
    sys.exit(1)
" 