name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linters
      run: |
        black . --check
        flake8 .
        mypy .
        isort . --check
        
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run security checks
      run: |
        bandit -r src/
        safety check
        
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build
        
    - name: Build package
      run: python -m build
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy to production
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # SSH Key Setup
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # SSH Deployment
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          dist/* \
          requirements.txt \
          requirements-dev.txt \
          "${SERVER_USER}@${SERVER_HOST}:${DEPLOY_PATH}"
          
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${SERVER_USER}@${SERVER_HOST} \
          "cd ${DEPLOY_PATH} && \
           python3 -m venv venv && \
           source venv/bin/activate && \
           pip install --upgrade pip && \
           pip install dist/*.whl && \
           pip install -r requirements.txt && \
           # Starte/Neustarte den Trading Bot Service
           sudo systemctl restart trading-bot"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          MESSAGE="✅ Deployment erfolgreich abgeschlossen"
        else
          MESSAGE="❌ Deployment fehlgeschlagen"
        fi
        
        curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
          -d chat_id=${TELEGRAM_CHAT_ID} \
          -d text="$MESSAGE" \
          -d parse_mode=HTML 