name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linters
      run: |
        black . --check
        flake8 .
        mypy .
        isort . --check
        
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run security checks
      run: |
        bandit -r src/
        safety check
        
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build
        
    - name: Build package
      run: python -m build
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
        
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Deploy to production
      id: deploy
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
      run: |
        # Extrahiere die Konfiguration
        echo "$CURSOR_SECRET" > config.json
        
        # Erstelle .env Datei
        python -c "
        import json
        with open('config.json') as f:
            config = json.load(f)
        with open('.env', 'w') as f:
            for key, value in config.items():
                f.write(f'{key}={value}\n')
        "
        
        # Starte den Bot
        python Trading.py &
        sleep 10  # Warte kurz um zu sehen ob der Bot startet
        if ps aux | grep -v grep | grep "Trading.py"; then
          echo "Bot successfully started"
          exit 0
        else
          echo "Bot failed to start"
          exit 1
        fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Send notification
      env:
        CURSOR_SECRET: ${{ secrets.cursor }}
        DEPLOY_STATUS: ${{ needs.deploy.result }}
      run: |
        python -c "
        import json
        import os
        import requests
        
        # Lade Konfiguration
        config = json.loads(os.environ['CURSOR_SECRET'])
        status = os.environ['DEPLOY_STATUS']
        
        bot_token = config.get('TELEGRAM_BOT_TOKEN')
        chat_id = config.get('TELEGRAM_CHAT_ID')
        
        if bot_token and chat_id:
            message = '✅ Deployment erfolgreich abgeschlossen' if status == 'success' else '❌ Deployment fehlgeschlagen'
            
            requests.post(
                f'https://api.telegram.org/bot{bot_token}/sendMessage',
                json={
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                }
            )
        " 